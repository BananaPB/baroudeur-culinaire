---
import { cn } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { cva, type VariantProps } from 'class-variance-authority'

const calloutConfig = {
  info: {
    style: 'border-blue-500 dark:bg-blue-950/5',
    textColor: 'text-blue-700 dark:text-blue-300',
    icon: 'lucide:info',
  },
  note: {
    style: 'border-blue-500 dark:bg-blue-950/5',
    textColor: 'text-blue-700 dark:text-blue-300',
    icon: 'lucide:pencil',
  },
  abstract: {
    style: 'border-green-500 dark:bg-green-950/5',
    textColor: 'text-green-700 dark:text-green-300',
    icon: 'lucide:clipboard-list',
  },
  todo: {
    style: 'border-blue-500 dark:bg-blue-950/5',
    textColor: 'text-blue-700 dark:text-blue-300',
    icon: 'lucide:circle-check',
  },
  tip: {
    style: 'border-cyan-500 dark:bg-cyan-950/5',
    textColor: 'text-cyan-700 dark:text-cyan-300',
    icon: 'lucide:flame',
  },
  success: {
    style: 'border-green-500 dark:bg-green-950/5',
    textColor: 'text-green-700 dark:text-green-300',
    icon: 'lucide:check',
  },
  question: {
    style: 'border-amber-500 dark:bg-amber-950/5',
    textColor: 'text-amber-700 dark:text-amber-300',
    icon: 'lucide:circle-question-mark',
  },
  important: {
    style: 'border-amber-500 dark:bg-amber-950/5',
    textColor: 'text-amber-700 dark:text-amber-300',
    icon: 'lucide:message-circle-warning',
  },
  warning: {
    style: 'border-amber-500 dark:bg-amber-950/5',
    textColor: 'text-amber-700 dark:text-amber-300',
    icon: 'lucide:alert-triangle',
  },
  failure: {
    style: 'border-red-500 dark:bg-red-950/5',
    textColor: 'text-red-700 dark:text-red-300',
    icon: 'lucide:x',
  },
  danger: {
    style: 'border-red-500 dark:bg-red-950/5',
    textColor: 'text-red-700 dark:text-red-300',
    icon: 'lucide:zap',
  },
  bug: {
    style: 'border-red-500 dark:bg-red-950/5',
    textColor: 'text-red-700 dark:text-red-300',
    icon: 'lucide:bug',
  },
  example: {
    style: 'border-purple-500 dark:bg-purple-950/5',
    textColor: 'text-purple-700 dark:text-purple-300',
    icon: 'lucide:list',
  },
  quote: {
    style: 'border-gray-400 dark:bg-gray-950/5',
    textColor: 'text-gray-700 dark:text-gray-300',
    icon: 'lucide:quote',
  },
} as const

const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)

const calloutVariants = cva('relative px-4 py-3 my-6 border-l-4 text-sm', {
  variants: {
    variant: Object.fromEntries(
      Object.entries(calloutConfig).map(([key, config]) => [key, config.style]),
    ),
  },
  defaultVariants: {
    variant: 'note',
  },
})

interface Props extends VariantProps<typeof calloutVariants> {
  title?: string
  class?: string
  variant?: keyof typeof calloutConfig
  defaultOpen?: boolean
}

const { title, variant = 'note', defaultOpen = true, ...rest } = Astro.props
---

<details
  class={cn(
    calloutVariants({ variant }),
    rest.class,
    '[&[open]>summary_svg:last-child]:rotate-180 [&[open]>summary]:mb-3',
  )}
  {...rest}
  open={defaultOpen}
>
  <summary
    class="flex cursor-pointer items-center font-medium [&::-webkit-details-marker]:hidden"
  >
    <Icon
      name={calloutConfig[variant].icon}
      class={cn('mr-2 size-4 shrink-0', calloutConfig[variant].textColor)}
    />
    <span class={cn('font-medium mr-2', calloutConfig[variant].textColor)}>
      {capitalize(variant)}
      {title && <span class="font-normal opacity-70"> ({title})</span>}
    </span>
    <Icon
      name="lucide:chevron-down"
      class={cn(
        'ml-auto h-4 w-4 shrink-0 transition-transform duration-200',
        calloutConfig[variant].textColor,
      )}
    />
  </summary>
  <div>
    <slot />
  </div>
</details>
