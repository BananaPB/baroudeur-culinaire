---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PostHead from '@/components/RecipesPostHead.astro'
import PostNavigation from '@/components/RecipesPostNavigation.astro'
import SubpostsHeader from '@/components/RecipesSubpostsHeader.astro'
import TOCHeader from '@/components/RecipesTOCHeader.astro'
import TOCSidebar from '@/components/RecipesTOCSidebar.astro'
import SubpostsSidebar from '@/components/RecipesSubpostsSidebar.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import Layout from '@/layouts/Layout.astro'
import {
  getAdjacentPosts,
  getAllPostsAndSubposts,
  getParentId,
  getSubpostCount,
  getPostReadingTime,
  getCombinedReadingTime,
  getParentPost,
  hasSubposts,
  isSubpost,
  getTOCSections,
  basePath,
getIngredients
} from '@/lib/recipes-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

const CATEGORY_LABELS: Record<string, { label: string; icon: string }> = {
  bases: { label: "Bases", icon: "lucide:wheat" },
  products: { label: "Produits finis", icon: "lucide:croissant" },
}

export async function getStaticPaths() {
  const posts = await getAllPostsAndSubposts()
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const currentPostArray = currentPostId.split('/')

const { Content, headings } = await render(post)

const isCurrentSubpost = isSubpost(currentPostId)
const navigation = await getAdjacentPosts(currentPostId)
const parentPost = isCurrentSubpost ? await getParentPost(currentPostId) : null
const postCategory = currentPostArray[0]

const hasChildPosts = await hasSubposts(currentPostId)
const subpostCount = !isCurrentSubpost
  ? await getSubpostCount(currentPostId)
  : 0
const postReadingTime = await getPostReadingTime(currentPostId)
const combinedReadingTime =
  hasChildPosts && !isCurrentSubpost
    ? await getCombinedReadingTime(currentPostId)
    : null

const tocSections = await getTOCSections(currentPostId)

const ingredients = await getIngredients(currentPostId);
---
<Layout>
  <PostHead slot="head" post={post} />
  {
    (hasChildPosts || isCurrentSubpost) && (
      <SubpostsHeader
        slot="subposts-navigation"
        parentId={isCurrentSubpost ? getParentId(currentPostId) : currentPostId}
      />
    )
  }
  {
    headings?.length > 0 &&
      !(
        isCurrentSubpost &&
        headings.length === 1 &&
        headings[0].text === post.data.title
      ) && <TOCHeader ingredientsList={ingredients as any} currentPostId={currentPostId} slot="table-of-contents" headings={headings} />
  }

  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-6"
  >
    <div class="col-start-2">
      <Breadcrumbs
        items={[
          { href: `/${basePath}`, label: 'Recettes', icon: 'lucide:cooking-pot' },
          { href: `/${basePath}/${postCategory}`, label: CATEGORY_LABELS[postCategory].label, icon: CATEGORY_LABELS[postCategory].icon },
          ...(isCurrentSubpost && parentPost
            ? [
                {
                  href: `/${basePath}/${parentPost.id}`,
                  label: parentPost.data.title,
                  icon: 'lucide:book-open',
                },
                {
                  href: `/${basePath}/${currentPostId}`,
                  label: post.data.title,
                  icon: 'lucide:file-text',
                },
              ]
            : [
                {
                  href: `/${basePath}/${currentPostId}`,
                  label: post.data.title,
                  icon: 'lucide:book-open-text',
                },
              ]),
        ]}
      />
    </div>

    {
      post.data.image && (
        <Image
          src={post.data.image}
          alt={post.data.title}
          width={1200}
          height={630}
          class="col-span-full mx-auto w-full max-w-5xl object-cover"
        />
      )
    }

    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col">
        <h1
          class="mb-2 scroll-mt-31 text-3xl leading-tight font-medium sm:text-4xl"
          id="post-title"
        >
          {post.data.title}
        </h1>

        <div
          class="text-muted-foreground divide-border mb-4 flex flex-col items-center justify-center divide-y text-xs sm:flex-row sm:flex-wrap sm:divide-x sm:divide-y-0 sm:text-sm"
        >
        <div
          class="flex w-full items-center justify-center gap-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
        >
          <span>{formatDate(post.data.date)}</span>
        </div>

        <div
          class="flex w-full items-center justify-center gap-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
        >
          <span>
            {postReadingTime}
            {
              combinedReadingTime &&
                combinedReadingTime !== postReadingTime && (
                  <span class="text-muted-foreground">
                    {' '}
                    ({combinedReadingTime} total)
                  </span>
                )
            }
          </span>
        </div>

          {
            subpostCount > 0 && (
              <div class="flex w-full items-center justify-center gap-1 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0">
                <Icon name="lucide:file-text" class="size-3" />
                {subpostCount} subpost{subpostCount === 1 ? '' : 's'}
              </div>
            )
          }
        </div>
        <div class="flex flex-wrap justify-center gap-2">
          {
            post.data.tags &&
              post.data.tags.length > 0 &&
              post.data.tags.map((tag) => (
                <a
                  href={`/tags/${basePath}/${tag}`}
                  class={badgeVariants({ variant: 'secondary' })}
                >
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </a>
              ))
          }
        </div>
      </div>

      <PostNavigation
        newerPost={navigation.newer}
        olderPost={navigation.older}
        parentPost={isCurrentSubpost ? navigation.parent : undefined}
      />
    </section>

    {
      tocSections.length > 0 && (
        <TOCSidebar ingredientsList={ingredients as any} sections={tocSections} currentPostId={currentPostId} />
      )
    }

    <article class="prose col-start-2 max-w-none" data-ingredients={JSON.stringify(ingredients)}>
      <Content />
    </article>

    {
      (hasChildPosts || isCurrentSubpost) && (
        <SubpostsSidebar
          parentId={
            isCurrentSubpost ? getParentId(currentPostId) : currentPostId
          }
          className="w-64"
        />
      )
    }

    <PostNavigation
      newerPost={navigation.newer}
      olderPost={navigation.older}
      parentPost={isCurrentSubpost ? navigation.parent : undefined}
    />
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')
      const article = document.querySelector('article')
      
      if (!article) return
      
      const groups = JSON.parse(article.dataset.ingredients || 'null').ingredients;
      const allIngredients = groups.flatMap(group => group.list);
      const sortedIngredients = allIngredients.slice().sort((a, b) => b.name.length - a.name.length);

      const ingredientNames = sortedIngredients.map(i => i.name.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      const regex = new RegExp(`\\b(${ingredientNames.join('|')})\\b`, 'gi');

      function highlightTextInNode(node) {
        if (node.nodeType === Node.TEXT_NODE) {
          const text = node.textContent;
          if (regex.test(text)) {
            const highlightedText = text.replace(regex, (match) => {
              const ingredient = sortedIngredients.find(i => i.name.toLowerCase() === match.toLowerCase());
              if (!ingredient) return match;
              return `<kbd class="ingredient-item bg-accent/25 text-sm" data-slug="${ingredient.slug}">${match}</kbd>`;
            });

            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = highlightedText;
            const parent = node.parentNode;
            const fragment = document.createDocumentFragment();
            while (tempDiv.firstChild) {
              fragment.appendChild(tempDiv.firstChild);
            }
            parent.replaceChild(fragment, node);
          }
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          if (node.tagName === 'SCRIPT' || node.tagName === 'STYLE' || node.tagName === 'KBD') {
            return;
          }
          Array.from(node.childNodes).forEach(child => highlightTextInNode(child));
        }
      }

      highlightTextInNode(article)

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }

      document.querySelectorAll('.ingredient-item').forEach(trigger => {
          const ref = trigger.getAttribute('data-slug');

          trigger.addEventListener('mouseenter', () => {
            document.querySelectorAll(`[data-slug='${ref}']`).forEach(el => {
              el.classList.add('hovered')
            })
          })
          trigger.addEventListener('mouseleave', () => {
            document.querySelectorAll(`[data-slug="${ref}"]`).forEach(el => {
              el.classList.remove('hovered');
            });
          });
      })
    })
  </script>
</Layout>
